{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"weather-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ContentHeader = _resolveComponent(\"ContentHeader\");\n  const _component_CitySelector = _resolveComponent(\"CitySelector\");\n  const _component_WeatherList = _resolveComponent(\"WeatherList\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_ContentHeader), _createVNode(_component_CitySelector, {\n    onSelectCity: $options.selectCity\n  }, null, 8 /* PROPS */, [\"onSelectCity\"]), _createVNode(_component_WeatherList, {\n    weatherList: $data.weatherList\n  }, null, 8 /* PROPS */, [\"weatherList\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_ContentHeader","_component_CitySelector","onSelectCity","$options","selectCity","_component_WeatherList","weatherList","$data"],"sources":["c:\\Users\\A\\Documents\\GitHub\\PJ-MINI\\01.vue\\weather-app\\src\\components\\weather\\WeatherContent.vue"],"sourcesContent":["<template>\r\n  <div class=\"weather-wrapper\">\r\n    <ContentHeader></ContentHeader>\r\n    <CitySelector @selectCity=\"selectCity\"></CitySelector>\r\n    <WeatherList :weatherList=\"weatherList \"></WeatherList>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ContentHeader from './ContentHeader.vue';\r\nimport CitySelector from './CitySelector.vue'\r\nimport WeatherList from './WeatherList.vue'\r\nimport weatherMixin from '@/mixins/weatherMixin'\r\n\r\n  export default {\r\n    name:\"weatherContent\",\r\n    components:{\r\n      ContentHeader,\r\n      CitySelector,\r\n      WeatherList\r\n    },\r\n    mixins:[weatherMixin],\r\n    data(){\r\n      return{\r\n        weatherList:[]\r\n      }\r\n    },\r\n    methods:{\r\n      async selectCity(city){\r\n        if(city.selected){ \r\n          const weather = await this.getWeatherInfo(city)\r\n          this.weatherList.push(weather)\r\n        }\r\n        else{\r\n          const index = this.weatherList.findIndex((weather) => weather.label == city.label)\r\n          this.weatherList.splice(index,1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;;;;uBAA5BC,mBAAA,CAIM,OAJNC,UAIM,GAHJC,YAAA,CAA+BC,wBAAA,GAC/BD,YAAA,CAAsDE,uBAAA;IAAvCC,YAAU,EAAEC,QAAA,CAAAC;EAAU,2CACrCL,YAAA,CAAuDM,sBAAA;IAAzCC,WAAW,EAAEC,KAAA,CAAAD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}