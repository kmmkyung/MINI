{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"weather-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ContentHeader = _resolveComponent(\"ContentHeader\");\n  const _component_CitySelector = _resolveComponent(\"CitySelector\");\n  const _component_WeatherList = _resolveComponent(\"WeatherList\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_ContentHeader), _createVNode(_component_CitySelector, {\n    onSelectCity: $options.selectCity\n  }, null, 8 /* PROPS */, [\"onSelectCity\"]), _createVNode(_component_WeatherList, {\n    weatherList: $data.weatherList\n  }, null, 8 /* PROPS */, [\"weatherList\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_ContentHeader","_component_CitySelector","onSelectCity","$options","selectCity","_component_WeatherList","weatherList","$data"],"sources":["/Users/minkyungkim/Documents/GitHub/PJ-MINI/vue-Weather/weather-app/src/components/weather/WeatherContent.vue"],"sourcesContent":["<template>\n  <div class=\"weather-wrapper\">\n    <ContentHeader></ContentHeader>\n    <CitySelector @selectCity=\"selectCity\"></CitySelector>\n    <WeatherList :weatherList=\"weatherList \"></WeatherList>\n  </div>\n</template>\n\n<script>\nimport ContentHeader from './ContentHeader.vue';\nimport CitySelector from './CitySelector.vue'\nimport WeatherList from './WeatherList.vue'\nimport weatherMixin from '@/mixins/weatherMixin'\n\n  export default {\n    name:\"weatherContent\",\n    components:{\n      ContentHeader,\n      CitySelector,\n      WeatherList\n    },\n    mixins:[weatherMixin],\n    data(){\n      return{\n        weatherList:[]\n      }\n    },\n    methods:{\n      async selectCity(city){\n        if(city.selected){ \n          const weather = await this.getWeatherInfo(city)\n          this.weatherList.push(weather)\n        }\n        else{\n          const index = this.weatherList.findIndex((weather) => weather.label == city.label)\n          this.weatherList.splice(index,1)\n        }\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;;;;uBAA5BC,mBAAA,CAIM,OAJNC,UAIM,GAHJC,YAAA,CAA+BC,wBAAA,GAC/BD,YAAA,CAAsDE,uBAAA;IAAvCC,YAAU,EAAEC,QAAA,CAAAC;EAAU,2CACrCL,YAAA,CAAuDM,sBAAA;IAAzCC,WAAW,EAAEC,KAAA,CAAAD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}