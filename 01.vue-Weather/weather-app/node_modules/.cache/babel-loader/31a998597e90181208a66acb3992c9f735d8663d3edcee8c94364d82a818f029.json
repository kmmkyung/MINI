{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-bfc4c356\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"city-selector\"\n};\nconst _hoisted_2 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.cities, city => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      onClick: $event => $options.selectCity(city),\n      class: _normalizeClass({\n        isSelected: city.selected\n      }),\n      key: city.label\n    }, _toDisplayString(city.label), 11 /* TEXT, CLASS, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_hoisted_1","_Fragment","_renderList","$data","cities","city","onClick","$event","$options","selectCity","_normalizeClass","isSelected","selected","key","label","_hoisted_2"],"sources":["/Users/minkyungkim/Documents/GitHub/PJ-MINI/vue-Weather/weather-app/src/components/weather/CitySelector.vue"],"sourcesContent":["<template>\n  <div>\n    <ul class=\"city-selector\">\n      <li @click=\"selectCity(city)\" :class=\"{isSelected: city.selected}\" v-for=\"city in cities\" :key=\"city.label\">{{ city.label }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\n  export default {\n    name:\"CitySelector\",\n    data(){\n      return{\n        cities:[\n          {Latitude:37,Longitude:135,label:'Seoul',selected:false},\n          {Latitude:0,Longitude:135,label:'A',selected:false,},\n          {Latitude:0,Longitude:135,label:'B',selected:false,},\n          {Latitude:35,Longitude:135,label:'C',selected:false,},\n          {Latitude:50,Longitude:10,label:'D',selected:false,},\n          {Latitude:35,Longitude:135,label:'F',selected:false,},\n          {Latitude:50,Longitude:10,label:'G',selected:false,}\n        ]\n      }\n    },\n    methods:{\n      selectCity(city){\n        city.selected = !city.selected; \n        this.$emit(\"selectCity\",city)\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .city-selector{\n    display: grid;\n    grid-template-columns: repeat(5,1fr);\n\n    li{\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      border: 0.1em solid #efefef;\n      padding: 0.3em;\n      cursor: pointer;\n\n      &:hover{\n        background: #fd1d1d;\n        color: #ffffff;\n      }\n    }\n  }\n  .isSelected{\n    background: #fd1d1d;\n    color: #ffffff;\n  }\n</style>"],"mappings":";;;EAEQA,KAAK,EAAC;AAAe;mBAF7B;;uBACEC,mBAAA,CAIM,cAHJC,mBAAA,CAEK,MAFLC,UAEK,I,kBADHF,mBAAA,CAAiIG,SAAA,QAHvIC,WAAA,CAGwFC,KAAA,CAAAC,MAAM,EAAdC,IAAI;yBAA9EP,mBAAA,CAAiI;MAA5HQ,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU,CAACJ,IAAI;MAAIR,KAAK,EAH1Ca,eAAA;QAAAC,UAAA,EAGyDN,IAAI,CAACO;MAAQ;MAA2BC,GAAG,EAAER,IAAI,CAACS;wBAAUT,IAAI,CAACS,KAAK,gCAH/HC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}